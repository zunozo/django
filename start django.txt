URLS : 단일 함수를 통해 모든 URL 요청을 처리하는 것이 가능하지만, 분리된 뷰 함수를 작성하는 것이 각각의 리소스를 유지보수하기 훨씬 쉽습니다. URL mapper는 요청 URL을 기준으로 HTTP 요청을 적절한 뷰로 보내주기 위해 사용됩니다. 또한 URL mapper는 URL에 나타나는 특정한 문자열이나 숫자의 패턴을 일치시켜 데이터로서 뷰 함수에 전달할 수 있습니다.
View : 뷰는 HTTP 요청을 수신하고 HTTP 응답을 반환하는 요청 처리 함수입니다. 뷰는 Model을 통해 요청을 충족시키는데 필요한 데이터에 접근합니다. 그리고 탬플릿에게 응답의 서식 설정을 맡깁니다.
Models : 모델은 응용프로그램의 데이터 구조를 정의하고 데이터베이스의 기록을 관리하고 쿼리하는 방법을 제공하는 파이썬 객체입니다.
Templates : 탬플릿은 파일의 구조나 레이아웃을 정의하고, 실제 내용을 보여주는 데 사용되는 플레이스홀더를 가진 txt파일입니다. 뷰는 HTML 탬플릿을 이용하여 동적으로 HTML 페이지를 만들고 모델에서 가져온 데이터로 채웁니다. 탬플릿으로 모든 파일의 구조를 정의할 수 있습니다. 탬플릿이 꼭 HTML 타입일 필요는 없습니다!
장고는 이 구조를 "모델 뷰 탬플릿(MVT)"아키텍처라고 부릅니다.
요청을 알맞은 뷰로 전달(urls.py)
URL mapper는 보통 urls.py라는 이름의 파일에 저장되어 있습니다. 예시에서 urlpatterns 맵퍼는 경로들(특정 URL 패턴들)과 해당하는 뷰 함수에 대한 맵핑 목록들을 정의합니다. 만약 지정된 URL 패턴과 일치하는 HTTP 요청이 수신된다면 관련된 view 함수가 요청을 전달합니다.
urlpatterns 객체는 path()함수와 re_path() 함수를 항목으로 가지는 리스트입니다.(파이썬 리스트는 대괄호를 사용하여 구분되며, 항목은 쉼표로 분리되고 선택적으로 후행 쉼표가 있을 수 있습니다.)
두 메소드의 첫번째 인수는 일치시킬 경로입니다. path() 메소드는 꺾쇠 괄호를 사용해서 인수를 정의합니다. 이 인수는 URL의 한 부분으로, 명명된 인수로 수집되어 뷰 함수로 보내집니다. re_path() 함수는 정규식이라는 유연한 패턴 매칭 접근을 사용합니다. 이것에 대해서는 나중에 다루도록 하겠습니다!
두 번째 인수는 패턴이 일치할 때 호출되는 다른 함수입니다. viewl.book_detail은 이 함수가 book_detail()이며 views 모듈 안에서 찾을 수 있다는 것을 나타냅니다.(즉, view.py 라는 파일 안에서요.)
요청 처리하기(views.py)
뷰들은 웹 클라이언트로부터 HTTP 요청을 수신하고 HTTP 응답을 되돌려주는 웹 어플레키션의 심장입니다. 그 사이에 그들은 데이터베이스에 접근하고 템플릿을 렌더링하기 위해 프레임워크의 다른 자원들을 정리합니다.
URL mapper가 불러올 수 있는 최소 뷰 함수 index()를 보여줍니다.
다른 모든 뷰 함수처럼 이 함수도 HttpRequest 객체를 인자(request)로 받고 HttpResponse 객체를 반환합니다. 이 예시에서는 요청에 관해서는 아무것도 하지 않고, 단순히 하드코딩된 문자열을 반환합니다. 뷰들은 보통 views.py 라는 파일 안에 저장되어 있습니다.
데이터 모델 정의하기(models.py)
장고 웹 어플리케이션은 모델이라는 파이썬 객체를 통해 데이터를 관리하고 쿼리(db에 정보를 요청)합니다. 모델은 필드 타입과 그들의 최대 크기, 기본 값들, 선택 목록 옵션, 문서의 도움말 텍스트, 폼을 위한 label text등을 포함하여 저장된 데이터의 구조를 정의합니다. 모델의 정의는 기본 데이터베이스와 별개입니다. 본인의 프로젝트 설정의 일부로써 여러 모델 중 하나를 선택할 수 있습니다. 본인이 사용할 데이터베이스를 정했다면, 그것에 직접적으로 접근할 필요가 업습니다. 그저 모델 구조와 다른 코드들을 작성하면, 장고가 당신과 데이터베이스가 소통하는 데 필요한 모든 더러운 작업들을 처리합니다.
아래 코드는 Team 객체를 위한 아주 간단한 장고 모델을 보여줍니다. Team 객체는 장고 클래스 models.Model에서 파생되었습니다. 이 객체는 팀 이름과 팀 레벨을 캐릭터 필드로 정의하고 각각의 기록에 저장될 최대 캐릭터 숫자를 정합니다. team_level은 랜덤으로 값이 선정되기 때문에, 우리는 이를 choice 필드로 정의하며, choices들 간에 선택된 값이 보여지고 디폴트값에 따른 데이터가 저장되록 합니다.

데이터 쿼리하기(views.py)
장고 모델은 데이터베이스를 간단히 탐색하기 위한 쿼리 API를 제공합니다. 이 API는 다양한 조건을 통해 수 많은 필드를 빠르게 매칭시킵니다. 그리고 복잡한 쿼리문을 지원합니다. 예를 들어, 당신은 팀의 이름이 "Fr"로 시작하거나 "al"로 끝나는 U11 레벨의 팀만을 지정할 수 있습니다.
굵게 표시된 줄은 모델 쿼리 API를 사용하여 team_level 필드의 텍스트가 정확히 'U09'인 모든 레코드를 필터링하는 방법을 보여줍니다.(이 기준이 필드 이름의 인수로 filter()함수에 전달되는 방법에 유의하십시오. 일치 유형은 team_level_exact와 같이 이중 밑줄로 구분됩니다.
이 함수는 render() 함수를 사용하여 브라우저로 다시 전송되는 HttpResponse를 만듭니다. 지정된 HTML 템플릿과 템플릿에 삽입할 일부 데이터("context"라는 변수에 제공)를 결합하여 HTML 파일을 생성합니다. 다음 섹션에서는 템플릿을 생성하기 위해 템플릿에 데이터를 삽입하는 방법을 보여줍니다.