Django admin site

장고의 관리자 어플리케이션은 모델을 사용하여 당신이 만들고, 보고, 업데이트하고, 그리고 삭제하는 데에 사용할 수 있는 사이트 영역을 자동적으로 만드는 데에 사용할 수 있음. 이는 당신이 시간을 많이 절약할 수 있도록 돕고, 모델을 쉽게 테스트 할 수 있게 하며 당신이 정확한 데이터를 가지고 있다는 느낌을 가질수 있도록 도움. 관리자 어플리케이션은 또한 웹 사이트의 유형에 따라 production의 데이터를 관리하는 데 유용함. 모델 중심 접근 방식은 모델에 관한 많은 불필요한 세부 사항을 사용자들에게 노출하는, 모든 사용자들에게 가장 좋은 방식이라고 말할 수 없기 때문에, 장고 프로젝트는 internal 데이터 고나리만을 위해서 사용하는 것을 추천함.

웹사이트 안에 관리자 어플리케이션을 포함시키기 위해 요구되는 모든 설정은 project를 생성하고나서, runserver했을때 자동적으로 완료됨. 결과적으로 모델을 관리자 어플리케이션에 추가하기 위해서 꼭 해야만 하는 것은 그것들을 등록하는 것임. 이 글의 마지막에서 모델 데이터를 더 잘 나타내기 위한 관리자 영역의 추가적인 설정을 짧게 보여주도록함.

모델을 등록한 뒤로는 새로운 "superuser"를 만들어서 사이트에 로그인을 하며, 이후에는 books, 저자, book instances 그리고 장르를 만들 것임. 이것들은 다음 튜토리얼에서 만들기 시작할 뷰 와 템플릿을 테스트할 때 유용할 것임.

1. Models 등록하기
첫째, Catalog 어플리케이션 안의 admin.py에서 
from catalog(앱명).models import class명

catalog의 models.py에서 class를 import해주고, admin.site.register(class명)를 불러옴으로써 모델들을 import하고 그것들을 등록한다.
모델이나 모델들을 사이트에 등록하는 가장 간단하나 방법임. 관리자 사이트는 커스터마이즈 범위가 넓음

2. Superuser 만들기
관리자 사이트에 로그인하기 위해서는, 직원 상태가 활성화 된 사용자 계정이 있어야 함. 레코드들을 보고 생성하기 위해서는 이 사용자가 모든 객체들을 관리하기 위한 허가가 있어야 함. 사이트에 대한 모든 접속 권한과 필요한 허가를 가진 'superuser' 계정을 mange.py를 사용해서 만들 수 있음.
superuser를 생성하기 위해 manage.py와 같은 경로 안에서 python manage.py createsuperuser를 호출한다.
username, 이메일 주소, 그리고 강력한 비밀번호를 입력해야 할 것임.
이 명령어가 완료되면 새로운 superuser가 데이터베이스에 추가되었을 것임.

3. 관리자 계정에 로그인하기
admin 에서 id, password치고 들어감
이곳은 설치된 어플리케이션에 따라 그룹지어진 모든 모델들을 보여줌. 모델 이름을 클릭해서 모든 관련 레코드들의 목록을 볼 수 있고, 그 목록들을 클릭하여 수정할 수 있음. 또한 모델 오른쪽의 Add 링크를 클릭하여 그 타입의 레코드를 곧바로 생성할 수 있음.

Books 모델 오른쪽의 Add 링크를 클릭해서 새로운 책을 만듬. 각 필드의 제목, 일치하는 방식에 유의 -> SAVE
이렇게하면 home으로 돌아왔을때 BOOK링크를 클릭해서 책들의 현재 목록을 볼수있는데, 각책의 제목이 Book 모델의 __str__() 메소드가 반환한 값임.
이 리스트에서 원하지 않는 책의 왼쪽에 있는 체크박스를 선택하고, action 드랍다운 목록에서 delete 동작을 선택한 후, Go 버튼을 클릭해 책을 삭제할 수 있음. 또한 ADD BLOCK 버튼을 클릭해서 새로운 책들을 추가할 수 있음.
링크 안의 책 이름을 선택해서 책을 편집할 수 있음. 아래에 보여지는 책 모델의 편집 페이지는 'add'페이지와 거의 동일함. 페이지의 제목(Change book)과 Delete, HISTORY 그리고 VIEW oN SITE 버튼들의 추가가 큰 차이점임.(마지막 버튼은 모델에서 get_absolute_url())메소드를 정의했기 떄문에 나타남.)

Home 에서 BookInstance를 눌러보면, 이것만 만들어지지 않았다는 것을 알 수 있다. BookInstance에서 BOOK을 만들 수 있긴 하지만(이것은 ForeignKey 필드의 특성때문).

4. 추가 설정
장고는 등록된 모델의 정보를 사용하여 기본적인 관리자 사이트를 만드는 일을 꽤 잘함.
각각의 모델은 모델의 __str__() 메소드로 생성된 문자열로 식별되는, 그리고 편집을 위한 세부 정보/양식 에 링크되어 있는 개별적인 레코드들의 목록을 가지고 있음. 기본적으로, 이 화면은 레코드에 대한 대량 삭제 작업을 수행할 수 있는 액션 메뉴를 상단에 가지고 있음.
레코드의 편집과 추가를 위한 모델 디테일 레코드 양식들은 모델 안의 모든 필드를 포함하고 있고, 그것들의 선언 순서에 따라 수직으로 배치되어 있음.
사용하기 더욱 편하도록 인터페이스를 추가적으로 사용자화 할 수 있음.

목록뷰:
각각의 레코드에 표시되는 추가적인 필드/정보를 추가하기
날짜나 다른 선택 값에 기초해서 어떤 레코드들이 목록지어질지 선택하는 필터들 추가하기.
목록 뷰 안의 동작 메뉴에 추가적인 옵션을 추가하고 이 메뉴가 양식 위의 어디에 보여져야 할 지 선택하기.
세부 뷰:
표시할 필드, 따를 순서, 그루핑, 편집 가능할지 여부, 사용될 위젯, 방향 등등을 선택하기.
인라인 편집기능을 넣기 위해 관련된 필드들을 레코드에 추가하기.
Book과 Author 모델 목록에 더 많은 정보를 추가하고, 그리고 그것들의 편집 보기의 레이아웃을 향상시키는 것을 포함함. Language와 Genre 모델은 변경하지 않을것임. 그들은 각각 하나의 필드만을 갖고 있기 때문에 변경하는 것에 대한 이득이 없음.

5. ModelAdmin 클래스 등록하기
관리자 인터페이스에서 모델이 보여지는 방식을 바꾸고 싶다면 ModelAdmin 클래스를 정의한 후 모델 안에 등록함.
Author 모델부터 시작하자면, catalog 어플리케이션의 admin.py에서
원래있던 Author 모델에  대한 등록을 주석처리하고, 아래와같이 새로운 AuthorAdmin과 그것의 등록을 추가함.
이제 우리는 Book 그리고 BookInstance를 위한 ModelAdmin 클래스를 추가할 것임. 또 다시 원본 등록을 주석처리하고,
이제 새로운 모델들을 생성하고 등록하기 위해서; 이것의 설명을 위해, 우리는 모델들을 등록하기 위해 @register 데코레이터를 대신 사용함.

6. 목록 뷰 들을 설정하기
현재 Locallibrary는 모델의 __str__() 메소드에서 생성되는 객체 이름을 사용하여 모든 저자들을 목록지음. 이것은 단지 몇명의 저자만 있을 때는 괜찮지만, 수많은 저자가 있을 때는 겹치는 이름의 서로 다른 저자가 있을것임. 그것들을 구분하거나, 아니면 그저 각각의 저자마다 흥미로운 정보를 보여주고 싶다면, list_display를 사용해서 view에 추가적인 필드를 추가할 수 있음.

Book 모델을 위해서 추가적으로 author 그리고 genre를 표시해보자. author는 foreignkey 필드 관계 (일-대-다)이기 때문에, 관련된 레코드의 __str__()값에 의해 나타내어질것임.

불행하게도 genre필드는 manytomanyfield 이기 때문에 list_display에 직접적으로 특정할 수 없음.(거대한 db 접근 "비용"이 발생할 수 있기 때문에 장고는 이것을 방지함) 대신 정보를 문자열로 받기 위해서 display_genre 함수를 정의함.
genre를 가져오는 것은 좋은 생각이 아님. 왜냐하면 데이터베이스 작동의 '비용'이 너무 높기 때문. 모델 안의 호출 함수들이 다른 이유로도 굉장히 유용하기 때문에, 예를 들자면 리스트안의 모든항목에 delete 링크를 추가하는 것처럼.

7. 목록 필터 추가하기
목록 안에 있는 항목들이 아주 많다면, 그 중에 어떤 항목들만이 표시될 지 정할 수 있는 필터를 추가하는 것이 유용하다. 이것은 list_filter 속성 안에서 필드들을 목록지어서 완료된다.

8. 세뷰 보기 레이아웃 조직하기
기본적으로, detail view들은 모든 필드들을 모델에 선언된 순서대로, 수직적으로 배치함. 다싱은 선언 순서, 표시될 피드들, 섹션들이 정보들을 조직하느데 사용될 지 여부, 필드들이 수직적 또는 수평적으로 표시될 지 여부 그리고 심지어 관리자 양식에서 어떤 편집 위젯이 사용될 지 까지 변경할 수 있음.

9. 세부 뷰 구역 나누기
fieldsets 속성을 사용하여, 세부 양식 안의 연관된 모델 정보를 그룹화하기 위해 "sections"를 추가할 수 있음.

BookInstance안에서, 우리는 책이 무엇인지(i.e. name, imprint, and id)그리고 이것을 언제 빌릴 수 있는지(status, due_back)에 대하나 정보를 가지고 있음. 우리는 BookInstanceAdmin 클래스에 굵게 표시된 텍스트를 추가하여 이것들을 각각 다른 구역에 추가할 수 있음.

10. 연관 레코드들의 인라인 편집
때때로 연관된 레코드들을 동시에 추가하는 것이 가능할 때도 있음. 예를 들어, 세부사항 페이지에서 책 정보 그리고 특정한 복사본에 대한 정보 둘 다 가질수도 있음.
이것은 inlines를 선언해서 할 수 있고, Tabularinline 또는 Stackedinline을 선택할 수 있음.
이 경우 우리는 인라인된 모델의 모든 필드들을 추가하는, 테이블화된 인라인 클래스를 선언했음. 레이아웃을 위해 모든 종류의 추가적인 정보들을 지정할 수 있음.
우리는 이미 존재하는 세개의 책 인스턴스와 그 아래에 새로운 책 인스턴스를 위한 세 개의 플레이스 홀더를 가지고 있음. 기본값으로 에비 책 인스턴스를 위한 플레이스홀더를 가지지 않고 새로운 북 인스턴스마다 새로운 북 인스턴스 링크하나씩 추가하는 것이 좋음. 또는 BookInstance를 여기서는 읽기 불가 링크로 목록화하는것도 좋음. 전자는 BookInstanceInline 모델 안의 extra 속성을 0으로 설정하여 완료할 수 있음.
Inline 할때, 내가 인라인목록을 추가하고자 하는 목록이 foreignkey를 가지고있어야함.
ex) Book class에 author가 foreign로 model되어있다면, book을 model로 하여 inline을 불러온다.
