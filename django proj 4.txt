Creating our home page

이젠 사용자에게 정보를 제공하기 위한 코드를 작성할것임. 첫번째 할일은 우리의 페이지에서 어떤 정보를 보여줄 것인지를 결정하고, 그 요소를 반환하는 데 사용되는 URL들을 정의하는 것. 다음으로 우리는 페이지를 나타내기위한 URL 매퍼, views, 그리고 탬플릿들을 생성할 것임.
아래 다이어그램은 주요 데이터 흐름 그리고 HTTP 요청과 응답을 처리하는 데 필요한 요소들을 보여줌. 모델은 이미구현되었기 때문에, 우리가 생성할 주요 요소들은 다음과 같음.
URL 매퍼들 : 적절한 view 함수들을 위해 지원되는 URL들(그리고 URL들 안에 인코딩된 어떤 정보라도)을 포워딩(전송)하기 위해.
View 함수들 : 요청된 데이터를 모델들에게서 가져오고, 데이터를 표시하는 HTML페이지를 생성하고 그리고 브라우저 안의 view로 페이지들을 사용자에게 반환하기 위해.
탬플릿들 : 데이터를 뷰들 안에 렌더링할 때 사용하기 위해.

1. resource URLS 정의하기
우리가 만드는 locallibrary 는 근본적으로 최종 사용자들에게는 읽기 전용이기 때문에, 우리는 사이트의 방문 페이지 그리고 책들과 저자들에 대한 목록 및 세부 view들을 보여주는 페이지만 제공하면 됨.

catalog/ (홈/색인(index)페이지)
catalog/books/ 모든 책들의 목록
catalog/authors/ 모든 저자들의 목록
catalog/book/<id> <id>라는 이름의 프라이머리 키 필드를 가지는 특정한 책을 위한 세부 사항 뷰. 예를들어 목록에 추가된 세 번째 책은 catalog/book/3이 될 것임
catalog/author/<id> - author에대해서 동일함.

처음 세개의 URL들은 인덱스 페이지, 책 목록, 그리고 저자 목록을 반환함. 이것들은 아무런 추가적인 정보도 인코드하지 않고, 데이터베이스에서 데이터를 가져오는 쿼리들도 항상 똑같음.
그러나, 쿼리들이 반환할 결과들은 데이터베이스의 내용물에 따라 다름.
그에 반해서 마지막 두개 URL들은 특정한 책 또는 저자에 대한 세부 정보를 나타냄. 이 URL들은 표시할 항목의 ID를 인코딩함. URL 매퍼는 인코딩된 정보를 추출하여 view로 전달함. 그리고 view는 데이터베이스에서 무슨 정보를 가져올지 동적으로 결정함. URL의 정보를 인코딩하여 우리는 모든 책들(또는 저자들)을 처리하기 위해 단일 모임의 rul 매핑, 뷰, 템플릿을 사용할 것임.

2. index page 만들기
우리가 만들 첫 번째 페이지는 index page.
index 페이지는 데이터베이스 안의 서로 다른 레코드들이 생성된 "개수(count)"와 함께 몇가지 정적 HTML을 포함함. 이것이 작동하도록 하기 위해서 우리는 URL 매핑, 뷰 그리고 탬플릿을 생성함.

2-1. URL 매핑
    path('', views.index, name='index'),
빈 문자열인 URL 패턴 : ''
URL 패턴이 감지되었을 때 호출될 view 함수: views.index 이 함수는 views.py 파일 안에서 index()로 이름지어져 있음.
이 path함수는 또한 name 매개 변수를 지정함. 그것은 이 특정한 URL매핑을 위한 고유 ID임. 이이름을 매퍼를 '반전'시킬 수 있음. 즉 매퍼가 처리하도록 설계된 리소스를 향하는 URL을 동적으로 생성하기 위해서. 예를 들자면, 아래 링크를 ㅌ매플릿에 추가해서 이름 매개 변수를 사용하여 다른 모든 페이지에서 홈페이지로 링크를 걸 수 있다.<a href="{% url 'index' %}">Home</a>.
위링크를 하드코딩할 수 있지만, 
<a href="/catalog/">Home</a>(이런식으로)
그렇게 하면 만약에 우리가 홈페이지를 바꿨을 때 /catalog/index/로 바꿨을 때 템플릿들은 더이상 알맞게 링크되지 않음. 반전된 url 매핑을 사용하는 것이 훨씬 유연하고 강력함.

3. View(함수-기반의)
뷰는 HTTP 요청을 처리하고, db에서 요청된 데이터를 가져오고, HTML 템플릿을 이용해서 데이터를 HTML 페이지에 렌더링하고 그리고 생성된 HTML을 HTTP 응답으로 반환하여 사용자들에게 페이지를 보여주는 함수임. 색인 뷰는 이 구조(model)을 따라감. 이것은 데이터베이스 안에 있는 Book, BookInstance, 사용 가능한 Bookinstnace 그리고 author 레코드들의 개수에 대한 정보를 가져오고, 그 정보를 디스플레이를 위해 탬플릿으로 전달함.
from catalog.models import Book, Author, BookInstance, Genre : 우리의 모든 뷰들 안에서 데이터에 접근하는데 사용할 모델 클래스들을 포함함.

view 함수의 첫번째 부분은 모델 클래스들에서 objects.all() 속성을 사용하는 레코드들의 개수를 가져옴. 이 함수는 또한 상태 필드에서 'a'(available) 값을 가지고 있는 BookInstance 객체들의 목록도가져옴.

view 함수의 마지막에선 HTML 페이지를 생성하고 이 페이지를 응답으로서 반환하기 위해 render() 함수를 호출함. 이 바로가기(shortcut) 함수는 아주 일반적으로 사용되는 경우들을 간단히 하기 위해 여러 다른 함수들을 포함함. render()함수는 아래 매개 변수들을 허용함.
HttpRequest인 원본 request 객체
데이터에 대한 플레이스홀더들을 갖고 있는 HTML탬플릿.
파이썬 딕셔너리인, 플레이스홀더에 삽입할 데이터를 갖고 있는 context 변수.

4. 탬플릿(Template)
탬플릿은 파일(HTML페이지 같은)의 구조나 배치(layout)을 정의하는 텍스트 파일임. 탬플릿은 실제 내용물(content)를 나타내기 위해 플레이스홀더(placeholder)들을 사용함. 장고는 당신의 어플리케이션 안에서 'templates'라고 이름지어진 경로 안에서 자동적으로 탬플릿들을 찾을 것입니다. 예를 들어서, 우리가 방금 추가한 색인(index) 뷰 안에서, render() 함수는 /locallibrary/catalog/templates/경로 안에서 index.html 파일을 찾으려 할 것이고, 파일이 없다면 에러를 표시할 것임. 이것은 이전의 변경점들을 저장하고 브라우저에서 확인할 수 있음. 이것은 다른 세부사항들과 함께 상당히 직관적인 오류 메시지를 표시할 것임."templatedoesnotexist at /catalog/"

4-1. 탬플릿 확장하기
색인(index) 템플릿은 head 및 body를 위해 표준 HTML 마크업이 필요할 것임. 우리가 아직 생성하지 않은 사이트들의 다른 페이지들을 향한 링크를 걸기 위한 탐색 섹션도 필요함. 그리고 소개 텍스트 및 책 데이터를 표시하는 섹션 또한 필요함. 대부분의 HTML과 탐색 구조는 사이트의 모든 페이지에서 동일할 것임. 모든페이지마다 똑같은 코드를 복사하는 대신, 기본 템플릿을 선언하기 위해 장고 탬플릿 언어를 사용하고, 탬플릿을 확장하여 각각의 페이지마다 다른 부분들만을 대체할 수 있음.
특정한 view를 위해 템플릿을 정의할 땐, 먼저 extends 탬플릿 태그를 이용하여 기본 탬플릿을 지정함. 그리고 나서 기본 탬플릿에서와 같이 block/endblock 섹션들을 이용해서 대체할 탬플릿의 섹션들을 선언함.(잇을경우).

예를 들어, 아래 코드 조각은 extends 탬플릿 태그의 사용 및 content 블럭을 재정의하는 방법을 보여줌. 생성된 HTML은 기본 탬플릿에서 정의된 코드와 구조를 포함할 것임.(title 블럭에서 정의한 기본 내용은 포함하지만, 기본 contents 블럭 대신 새로운 contents 블럭 포함).

5. locallibrary 기본 템플릿
우리는 아래 코드 조각을 locallibrary 웹사이트의 베이스 템플릿으로 사용할 것임. HTML 코드를 조금 포함하고, title,sidebar, content블럭을 정의함. 
//css를 몰라서.. 무슨뜻인진 모르겟음..
탬플릿에는 HTML 페이지의 레이아웃과 프레젠테이션을 개선하기 위한 bootstrap 의 css가 포함되어 있음. bootstrap을 사용해서 서로 다른 크기의 화면에서도 잘 표시되는 매력적인 페이지를 빠르게 만들 수 있음.
또한 기본 템플릿은 추가적인 꾸미기(styling)을 제공하는 로컬 css 파일을 참조함.

5-1. 색인(index) 템플릿
동적 컨텐츠 섹션에서 우리는 우리가 포함하고 싶은 view의 정보를 위한 플레이스홀더(탬플릿변수)를 선언함. 이 변수들은 이중 중괄호로(핸들 바)로 묶임
탬플릿 변수는 이중 중괄호로 감싸여져있고 {{aa}}, 태그들은 퍼센트 기호와 단일 중괄호로 감싸여 있음. {% %}
중요한 것은 변수들의 이름은 열쇠(Key)들로 정해진다는 것임. 이 열쇠들은 우리의 view의 render()함수 안의 context 사전(dict)로 전달하는 열쇠임. 변수들은 탬플릿이 렌더링될 때 그것들과 연관된 값들로 대체될 것임.

5-2. Templates 에 정적 파일 참조하기(referencing)
당신의 프로젝트는 자바스크립트,css 그리고 이미지를 포함하는 정적 리소스들을 사용할 가능성이 높음. 이 파일들의 위치가 알 수 없기 때문에(또는 바뀔 수 있기 때문에), 장고는 STAITC_URL 전역 설정을 기준으로 탬플릿에서의 위치를 특정할 수 있도록 함. 기본 뼈대 웹사이트는 STATIC_URL 의 값을 '/static/'으로 설정하지만 당신은 이것들을 콘텐츠 전달 네트워크나 다른곳에서 호스트할 수 도 있음.
탬플릿 안에서 당신은 먼저 탬플릿 라이브러리를 추가하기 위해 'static' 을 지정하는 load 탬플릿 태그를 호출함. 그리고 나서 static 탬플릿 태그를 사용할 수 있고 관련 URL을 요구되는 파일에 지정할 수 있음.

5-3. URL 링크하기
urls.py에서 호출된 path() 함수의 이름 및 연관된 view가 그 함수에서 수신받을 모든 인자들을 위한 값들을 허용하고, 리소스에 링크하는 데 사용할 수 있는 URL을 반환함.

5-4. 템플릿을 찾을 수 있는 곳 설정하기
탬플릿 폴더 안에서 탬플릿을 찾아볼 수 있도록 장고에게 위치를 가르쳐 주어야 함. 그것을 하기 위해서, 아래코드 샘플에 굵게 표시된 것 처럼 settings.py 파일을 수정하여 TEMPLATES 객체에 templates 경로를 추가함.

도전과제.
1. LocalLibrary 기본 탬플릿(base template)에는 title 블록이 정의되어 있습니다. 색인 탬플릿(index template) 안에 이 블록을 덮어쓰기하고 페이지를 위한 새로운 제목을 만들어 보세요. 해결완료!!
2. 대소문자 구분 없이 특정한 단어를 포함하는 장르와 책들의 개수(count)를 생성하도록 view 를 수정하고, 결과를 context에 전달해 보세요. 이것은 num_books와 num_instances_available을 생성하고 사용하는 것과 비슷한 방법으로 달성할 수 있습니다. 그리고 나서 이 변수들을 포함시키기 위해 index template 를 업데이트 하세요.
 해결완료!!
대소문자 구분 없이. 하려면 https://docs.djangoproject.com/en/3.1/ref/models/querysets/  여기가서 찾아보니깐, icontains을 써야하고, genre라는 모델을 찾고 그 objects안에 name이라는 변수가 해당 문자와 일치하는지 확인한후에, count()라는 변수를통하여 개수를 센다. count()를 사용하지않으면 queryset()으로 마치 list처럼 출력된다.


//2학년때 웹프로그래밍에서 끄적인 이후로, 홈페이지를 처음만들어보는데 굉장히 신기하고(CSS를 몰라서그런가) 어렵지만(친숙하지않지만), 재밌다.
내가 만들지 않았다는 점이 더 재밌다 ㅋㅋㅋ