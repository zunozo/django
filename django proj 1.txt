locallibrary 따라하기

1.env생성을 마친후, 하위폴더에
django-admin startproject locallibrary

2.locallibrary 들어가서
pyton3 manage.py startapp catalog

대부분의 파일들은 그것의 목적에서 따온 이름을 갖고 있음.

migrations 폴더 : 모델을 수정할 때 마다 자동으로 데이터베이스를 업데이트하는 것을 가능하게 해 줄 마이그레이션 파일들을 저장할 폴더
__init__.py : 장고/파이썬 폴더를 파이썬 패키지로 인식하게 할 빈 파일. 또한 프로젝트의 다른 부분에서 객체를 사용할 수 있게 함

이제 어플리케이션이 생성되었으니 프로젝트에 등록해야함. 도구가 실행될 때 프로젝트에 포함시키기 위해서(like model in db).
어플리케이션들은 프로젝트 설정 안의 installed_apps 리스트에 추가함으로써 등록할 수 있음.

<어플name>.apps.catalogconfig
어플리케이션 구성 객체를 지정하게 됨.
이것은 어플리케이션을 생성할 대 /catalog/apps.py 안에 생성됨.

settings.py 분석
database : 자신이 원하는 데이터베이스를 지정
가능한 개발과 결과물에 동일한 데이터베이스를 사용하여 사소한 동작 차이를 방지해야함.
SQLite : 많은 동시접속을 예상하지 않고, 설정에 추가적인 작업이 필요없기 때문.
SECRET_KEY : 장고의 웹사이트 보안 전략의 일부로 사용되는 비밀키. 만약 이 코드를 개발 과정에서 보호하지 않는다면, 제품화 과정에서 다른 코드를 사용해야 함.
DEBUG : 이것은 에러가 발생했을 때 HTTP 상태코드 응답 대신 디버깅 로그가 표시되게 함. 디버깅 정보는 공격자에게 유용하기 때문에 제품화된 환경에서는 False로 설정해야함. 하지만, 지금은 True로 설정함.

웹사이트는 프로젝트 폴더 안의 URL 맵퍼 파일과 같이 생성됨.(urls.py) urls.py를 통해 모든 url 맵핑을 관리할 수 있지만, 연관된 어플리케이션에 따라 매핑을 다르게 하는 것이 일반적.

url 맵핑은 urlpatterns 변수를 통해 관리되는데, 이 변수는 path()함수의 파이썬 list타입임. 각각의 path() 함수는 패턴이 일치할 때 표시될 뷰에 url 패턴을 연결하거나, 다른 url 패턴 테스트 코드 목록에 연결함. urlpatterns 리스트는 맨 처음에 관리자 어플리케이션의 고유한 url 맵핑 정의를 갖고 있는 admin.site.urls 모듈에 admin/패턴을 가지고 있는 모든 url을 매핑하는 단일 함수를 정의.
path()속의 경로는 일치시킬 URL 패턴을 정의하는 문자열. 이 문자열은 명명된 변수를 꺽쇠 괄호안에 포함할 수 있음.
ex) 'catalog/<id>/' 이 패턴은 url을
/catalog/any_chars/처럼 일치시키고 any_chars를 뷰에 매개 변수 이름이 id인 문자열로 전달함.
ex) urlpatterns += [path('catalog/', include('catalog.urls')),]
이 새로운항목은 요청을 모듈 catalog.urls에 catalog/ 패턴과 함께 전달하는 path()를 포함함.
만약 www.xxxx.com/catalog로 시작되는 요청이 들어오면 catalog/urls.py를 참조해서 맵핑하겠다는 의미

이제 사이트의 (즉, 127.0.0.1:8000)을 127.0.0.1:8000/catalog/로 리다이렉트로 하도록 함. 이것이 우리가 이프로젝트에서 사용하는 유일한 어플리케이션 임. 이것을 하기 위해서 특별한 뷰 함수(redirectview)를 사용 이 함수는 path()에서 지정된 URL 패턴이 일치할 때(위의 경우에선 루트URL)첫 번째 인자를 (/catalog/)로 리다이렉트할 새로운 상대 URL로 간주함.

path()함수의 첫번째 매개변수를 비워놓으면 '/'를 의미함.

마지막으로 urls.py라는 파일을 catalog 폴더 안에 생성함. 그리고 임포트된 텅빈 urlpatterns를 정의함 어플리케이션을 만들면서 패턴들을 이곳에 추가

webstie framework 테스트 하기
뼈대를 모두 만들었는데 웹사이트는 아직 아무것도 하지 않지만, 우리들이 여기까지 완성한 프로젝트가 오류 없이 돌아가는지 한번 실행해 볼 필요가 있음. 그전에 먼저 데이터베이스로의 마이그레이션 작업을 해야 함. 이것은 데이터베이스에 우리의 어플리케이션에 속한 모든 모델을 포함하도록 업데이트해야함.

장고는 ORM(object-relational-mapper : 객체-관계-매퍼)를 사용하여 장고 코드 안에 있는 모델정의(객체)를 기본 데이터베이스에서 사용하는 데이터 구조(관계형 DB)에 매핑함. 모델의 정의를 바꿀 때 마다, 장고는 변화를 추적해서, 데이터베이스 안의 기본 데이터 구조가 모델과 일치하도록 자동적으로 이전하는 스크립트를 생성할 수 있음.

웹사이트를 생성할 때 장고는 사이트의 관리자 섹션에서 사용할 여러모델들을 자동으로 추가함.

python mangae.py makemigrations
		migrate
		runserver

저장되어야 할 데이터의 구조에 영향을 미치는 방식으로 모델이 변경될 때마다 위의 명령어를 실행해야 함.(모든 모델과 개별적인 필드의 추가와 제거를 포함하여)

이렇게 실행하면 에러페이지가 나오는데, 그 이유는 아직 (사이트의 루트에 대한 URL을 가져올 때 리다이렉트되는) catalogs.urls 모듈 안에 정의된 page/url들이 없기 때문.
자동화된 디버그 기록. 