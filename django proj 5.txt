Generic list and detail views

제네릭 클래스-기반 뷰(generic class-based views)에 대해 아라보자
그것이 일반적인 사용 사례를 위해 작성해야 하는 코드들을 줄이는 방법을 보여줌. 또한 URL 처리에 대해 더 세부적으로 알아볼 것이며, 기본 패턴매칭을 수행하는 방법을 보여줌.

1. 책 목록 페이지
책 목록 페이지는 모든 사용 가능한 책 레코드들의 목록을 페이지 안에 나타낼 것이며, 다음 URL을 사용하여 접근한다. catalog/books/ 이 페이지는 각 레코드마다 제목과 저자를 나타낼 것이며, 제목은 관련된 책 페이지로 이동하는 하이퍼링크 처리됨. 이 페이지는 사이트의 다른 페이지들과 같은 구조와 내비게이션을 가지고 있어서, 우리는 이전 튜토리얼에서 만들었던 템플릿을 확장해서 사용하면 됨.

1-1. URL mapping
/catalog/urls.py 파일에 인덱스 페이지처럼 path() 함수는 URL('books/')과 매치되는 패턴, URL이 매치될 때 호출되는 view 함수, 그리고 이 특정 매핑에 대한 이름을 정의함.
view함수는 이전과 다른 형태를 가짐. 왜냐면 이 view는 사실 클래스로 구현이 되기 때문. 우리는 이 view를 직접 구현하지 않고, 이미 존재하는 generic view 함수를 상속받아 view함수를 구현할 것임. genreic view 함수는 우리가 구현하고 싶은 기능들을 거의다 가지고 있음.
Django 클래스 기반 view에서는, as_view()클래스 메소드를 호출해 적절한 view함수에 접근할 수 있음. 이건 클래스의 인스턴스를 생성하는 작업과 모든 HTTP 요청을 처리하는 핸들러 메소드가 제대로 동작하는지를 처리함.

2. 뷰(클래스기반)
표준 function으로 우리는 꽤나 쉽게 book list view를 만들 수 있는데 (마치 이전 우리의 indexview같이), 모든 책에 대한 db쿼리를 만들어서 render() 함수를 불러 특정 템플릿에 리스트를 보낸다. 대신 우리는 class-based generic list view(listview)를 사용하는데, 존재하는 뷰로부터 상속받아온 클래스임. generic view가 이미 우리가 필요한 대부분의 기능성을 실행하면서 동시에 Django best practice이기 때문에, 우리는 코드의 양과 반복을 줄이고 궁극적으로 유지보수에 수고가 덜드는 견고한 리스트 뷰를 만들수 있음.

Generic view는 명시된 모델의 모든 레코드를 가져오기 위해 데이터베이스를 쿼리할 것이고, /locallibarry/catalog/templates/catalog/book_list.html경로에 있는 템플릿을 렌더링함. 템플릿 안에서 우리는 object_list나 book_list라는 템플릿 변수를 사용해 도서 목록에 접근할 수 있음.(일반적으로 the_model_name_list.)
속성이나 디폴트 동작을 추가할 수 도 있음. 예를들어, 같은 모델을 사용하지만 여러 개의 뷰를 사용해야 되는 경우 다른 템플릿 파일을 명시할 수 있음. 혹은 book_list 템플릿 변수명이 직관적이지 않다고 생각해 다른 템플릿 변수명을 사용하고 싶을지도 모름. 아마가장 유용한 베리에이션은 리턴값의 결과를 바꾸거나 필터링하는 것임. 따라사 모든 책을 나열하는 대신, 유저가 읽은 순으로 5개의 책을 나열할 수도 있음.

2-2. 클래스 기반 뷰의 메소드 오버라이딩
에를들어, get_queryset()메소드를 오버라이딩해 반환되는 레코드의 리스트들을 바꿀 수 있음. 이건 우리가 이전에 했던 queryset 속성을 지정하는 방법보다 더 유연한 방법임.
템플릿에 추가적인 컨텍스트 변수들을 전달하기 위해 get_context_data()를 오버라이딩 할 수도 있음. (도서목록이 디폴트로 전달됨) 아래의 코드는 some_data 라는 이름의 변수를 어떻게 컨텍스트에 추가하는지를 보여줌.(이렇게하면 템플릿 변수로 사용할 수 있음)
이렇게 할 때에는, 아래의 패턴을 따르는 것이 중요함.
첫째로, 슈퍼클래스에서 기존 컨텍스트를 가져옴.
그리고 새로운 컨텍스트 정보를 추가함.
마지막으로 새롭게 업데이트된 컨텍스트를 리턴함.

3. 리스트 뷰 템플릿 생성하기
catalog 어플리케이션 내의 Book 모델
제네릭 뷰의 템플릿은 다른 템플릿과 비슷함.(물론 템플릿에 전달되는 컨텍스트나 정보는 다를지도 모르지만.) 다른 index 템플릿처럼, 우리는 첫번째줄에 base 템플릿을 넣어 확장한 다음, content라는 이름의 블록으로 교체함.
뷰는 object_list나 book_list 라는 디폴트 aliases 로 컨텍스트(도서 목록)을 전달함. object_list나 book_list 둘 중 어느 것을 적어도 상관이 없음.

3-1. 조건부 실행
if, else 그리고 endif 라는 탬플릿 태그들은 book_list 가 정의되었는지, 그리고 존재하는지 체크함. 만약 book_list가 없다면, 책이 존재하지 않는다는 else 절의 텍스트 문구가 표시될 것임. 만약 book_list가 존재한다면, 도서목록의 갯수만큼 반복해서 실행함.

3-2. 반복 구문
for 와 endfor 라는 템플릿 태그들은 아래와 같이 도서목록을 살펴보는 루프를 위해 사용함. 각각의 반복은 book 템플릿 변수에 현재 리스트 아이템에 대한 정보를 채움.
여기에서 사용되지 않지만, 반복 구문 내에서 Django는 반복을 추적할 수 잇는 다른 변수들을 만들 수 있음. 예를 들어, forloop.last라는 변수로 루프의 마지막 실행에 대한 조건부 처리를 할 수 있음.

3-3. 변수 접근하기
반복구문내에서의 코드는 각각의 책에대한 리스트 아이템을 생성함. 이 리스트 아이템은 타이틀(아직 작성되지 않은 상세 뷰의 링크)와 작가 이름을 나타냄.
점 표기법을 이용해서 연관된 책의 레코드에 대한 필드에 접근이 가능함. book 다음의 텍스트는 모델에 정의되어있는 필드의 이름임.
우리는 템플릿 안에 모델에서 정의한 함수를 볼러올 수도 있음. 이 경우, 우리는 Book.get_absolute_url()함수를 호출해 연관된 세부 레코드를 표시하는 URL을 가져옴. 이작업읂 함수가 아무 인자를 가지지 않을 때 제공됨.(여기에는 인자를 넘길 방법이 없음)
우리는 템플릿 내에서 함수를 호출할 때 발생하는 부작용을 조금 조심해야 한다. 여기서 우리는 그저 표시하기 위해 URL을 얻었지만, 함수는 그보다 더한 작업도 할 수 있음.

3-4. 베이스 템플릿 업데이트

4. Book 상세 페이지
URL catalog/book/<id>(book의 primary key)에 접근해서, Book의 상세 페이지는 특정 책의 정보를 보여줄 것임. Book 모델 (author, summary, ISBN, language, 그리고 genre)같은 필드에 추가로, 우리는 가능한 복사본의 상세부분, 즉 상태와 기대하는 반납일, 기록 그리고 아이디 등을 리스트화 할 것임. 이렇게 하면 독자들이 책의 리스트를 확인할 뿐만 아니라, 언제 책을 대여할 수 있는지에 대한 여부를 확인할 수 있게 해줌.

4-1. URL 매핑
book-detail URL 패턴은 우리가 원하는 책의 id를 캡처하기 위해 특별한 구문을 사용함. 구문은 간단한데, 꺽쇠 괄호는 캡처하는 URL의 일부를 정의하고 뷰가 캡처 된 데이터에 액세스하는데 사용 할 수 있는 변수의 이름을 지정함. 예를들어, <something> 은 패턴을 캡처해서 something이라는 변수에 데이터를 담아 전달함. 우리는 선택적으로 변수 이름 앞에 데이터 형식(int,str,slug,uuid,path)을 정의하는 converter spefcification 을 사용할 수 있음.
여기에서 우리는 book id를 캡쳐하기 위해 '<uuid:pk>' 라는 특별히 포맷화된 문자열을 활용할 것임. 그리고 pk(primary key의 단축어)라는 이름의 파라미터로서 뷰로 넘겨줄것임.
관련된 URL은 실제로 catalog/book/<digits>임.
통상 class-based detail view는 pk라는 이름을 가진 파라미터로 전달됨. 만일 자체적으로 function view를 만든다면 어떤 이름이라도 사용 가능. 혹은 이름이 없는 argument에 정보를 넣어 전달 할 수도 있음.

4. Regulr expression(정규표현식)을 이용한 고급 path matching
path()을 이용한 패턴 검색은 간단하고 일반적인 경우 - 예를 들어 단지 특정 문자열이나 숫자가 있는지 - 매우 유용함. 만일 좀더 세밀한 조건 - 예를 들어 특정 문자열 길이를 갖는 문자열 검색 - 으로 검색 하고자 한다면 re_path()를 사용하길 권고함.
re_path는 정규 표현식을 사용한다는 점만 빼고 path() 와 똑같음.

4-1.
Passing additional options in your URL maps
우리가 여태 까지 사용하지는 않았지만, 쓸모있을만한 한 기능은 당신이 additional options을 정의내리고 view에 전달할 수 있다는 것임. 이 option들은 dictionary 형태로 정의하고 path() 함수의 3번째 명명되지 않은 argument로 전달됨. 이 방식은 만약, 당신이 동일한 view를 다른 곳에서 재활용하려고 하거나, 각 상황에 맞게 조절하려고 할 때 유용함.
추가된 option과 변환된 패턴들 중 명명된 것들은 view에 명명된 arguments로 전달된다. 만약 당신이 동일한 이름을 변환된 패턴들과 추가적인 option에 사용한다면, 오직 변환된 패턴들만이view에 보내지게 된다.(추가된 option들에 있는 값들을 모두 버려집니다.)

5. 뷰(클래스 기반)
/locallibrary/catalog/templates/catalog/book_detail.html template를 만들면 ,view는 template에 URL mapper에 의해 찾고자 하는 데이터베이스에 있는 특정 Book 레코드의 정보를 전달할 것임. template 안에서 template 변수 object 또는 book(즉, 일반적으로는 '해당_모델_명')으로 책 목록에 접근할 수 있음

만약 필요하다면, 사용하고 있는 template 또는 template 안에서 book을 참조하는데 사용되는 context object의 이름을 바꿀 수 있음. 또한 예를 들어 context에 정보를 추가하는 식으로, 메서드를 오버라이드 할 수도 있음.

만약 해당 레코드가 존재하지 않는다면.
만약 요청된 레코드가 존재하지 않는다면, 제네릭 클래스 기반의 detail view는 Http404 exception이 저절로 발생할 것임. 만들어질때, 적절한 resource not found 페이지를 알아서 보여줄 것임. 만약 원한다면 당신이 해당페이지를 수정할 수 있음.
이런일이 어떻게 발생하냐면 밑에 있는 코드는 만약 당신이 제네릭 클래스 기반의 detail view를 사용하지 않는다면, 클래스 기반의 view를 어떻게 함수 형태로 표현할 수 있는지 보여준다.
view는 먼저 model로 부터 특정 book의 레코드를 얻으려고 할 것임. 이 시도가 실패하면, view는 해당 책이 존재하지 않음. 을ㅇ 알려주면서 http404 exception이 발생할 것임. 그리고 마지막 과정은, 평소처럼, book 정보를 context parameter 에 집어넣고 template 이름과 함께 render()함수를 호출 할 것임.
혹 만약 해당 레코드를 차지 못한다면, 우리는 손쉬운 방법으로 Http404 exception을 발생하기 위해 get_object_or_404() 함수를 사용할 수 도 있음.

5-1. 상세 뷰 템플릿 생성하기.
제네릭 클래스 기반 상세뷰의 디폴트 파일명임.(catalog 어플리케이션의 book 모델을 위한 상세 뷰)
이 템플릿의 작가링크는 비어있는 URL이다. 왜냐면 아직 작가상세페이지를 만들지않았기때문에. 존재한다면 업데이트해줘야함.
content 블럭을 오버라이드 해서 우리의 기본 템플릿을 extend하였음.
우리는 조건 판단 처리를 해서 특정 컨텐츠가 있을지 없는지 체크하여 표시함.
for 루프를 활용하여 objects들의 리스트를 표현함.
우리는 context fields를 dot notation 을 활용함.(왜냐면 우리는 detail generic view를 사용하는데, context의 이름은 book 이기에 우리는 'object'를 사용할 수 있음.)

우리가 본 적없는 한가지 흥미로운 점은 book.bookinstance_set.all()함수임.
이 메소드는 Django에 의해 자동으로 만들어진 메소드임. 이 메소드는 Book과 관련된 BookInstance 레코드 집합을 반환함.

이 메소드는 관계의 한쪽('one')에만 foreignkey 필드를 선언했기 때문에 필요하다. 다른 many모델에서 아무것도 선언하지 않았기 때문에 관련 레코드 집합을 가져올 필드가 없었음. 이 문제를 해결하기 위해, django 는 지금 우리가 사용하고 있는 'reverse lookup'이라는 적당한 이름의 함수를 만들었음. 이 함수의 이름은 foreignkey가 선언되어있는 모델 이름을 소문자로 만들고, 그 뒤에 _set을 붙이면 됨. (따라서 Book에서 만든 함수는 bookinstance_set()가 됨.)

여기서 우리는 모든 레코드를 가져오기 위해 all()을 사용했는데, 반대로 filter()메서드를 사용해서 레코듸 부분집합을 가져올 수 있지만, 당신은 template에서 이걸 직접할 수는 없다. 왜냐하면 함수의 arguments를 정할 수 없으니깐.
만약 순서를 정의하지 않는다면(클래스 기반 view 또는 model에서), 당신은 개발 서버로부터 다음과같은 에러를 받음.
이것은 db에서 order by 명령어가 실행되었을 것이라고 예상하기 때문에 발생하는 것임. 이러한 것이 없다면, 레코드들이 정확한 순서로 반환되었는지 알 수 없음
sort_by()에 parameter를 전달하여 사용하는 것은 (위에서 이야기했던 filter()와 동일한 역할을 함), 사용할수 없기 때문에 3개의 선택중에 하나를 골라야함.
1. Add a ordering inside a class Meta declaration on your model.
2. Add a queryset attribute in your custom class-based view, specifying a order_by().
3. Adding a get_queryset method to your custom class-based view and also specify the order_by().
만약 author model에 class meta 사용하기를 결정했다면(커스터마이징 된 클래스 기반 view만큼 유연하지 않겠지만, 쉬운 방법임), 아마 밑에 코드와 비슷하게 끝날것임.
마지막으로, 그러나 적어도 우리는 정렬을 attriubte/column에 따라 해줘야 함. unique 여부와 상관없이 당신의 db의 퍼포먼스 이슈를 위해서 필요함. 물론, 이것은 여기서 필요한 것이 아니며 어떻게 보면 약간 진도를 앞서나가는 것 같지만 이런 작은 사용자와 프로젝트에서도 미래의 프로젝트를 위해서 미리 명심해 두는것이 좋음.

6. Pagination(페이징)
만약 레코드가 몇 개 없다면, 현재의 책 목록페이지도 괜찮다. 하지만, 수십,수백개의 레코드를 갖고 있다면, 페이지는 가져오는데 점차 시간이 늘어날 것임. 해결 방법은 list view에 pagination을 추가하는것임. 그리고 pagination은 각 페이지마다 보여주는 항목들을 감소시켜줄 것임.
장고는 pagination에 대한 훌륭한 지원을 하고 있음. 더욱 좋은 점은, 이 지원은 제네릭 클래스 기반 list view에 내장 되어 있다는 점이다.

6-1. Views
paginate_by = 10
10개이상의 레코드를 갖게 되면, view는 template에 보내는 데이터에 pagination하는 것을 시작함. 다른 page들을 GET parameter들을 통해 접근할 수 있음.

6-2. Templates
자료들이 pagination 되었음. 우리는 template에 결과들을 훑어 볼 수 있도록 만들어야함. 우리는 이러한 기능이 모든 list view들에 필요할 수 있으므로, 우리는 base template에 추가하는 방향으로 작업을 진행함.

/locallibarry/catalog/templates/base_generic.html 열고 content block 밑에 다음과같은 pagination block 을 추가해라.
첫번째로 코드는 현재 페이지가 pagination이 가능한지 체크함. 만약 가능하다면, 다음 페이지와 전 페이지를 적절히 추가함.
만약 현재 페이지에 pagination이 사용중이라면, page_obj가 paginator 오브젝트 로서 존재한다. 해당 오브젝트는 현재 페이지, 전 페이지, 페이지 수는 얼마나 되는 지 등의 모든 정보를 제공한다.
pagination 링크를 만들기 위해 우리는 {{ request.path}} 를 이용하여 현재 페이지의 URL 을 가져오도록 할 것임. 우리가 pagination을 하는 객체와 독립적이기 때문에 유용함.

Challenge
catalog/authors/ — 작가 목록.
catalog/author/<id> —<id>라는 이름의 기본키를 이용한 작가의 세부 사항
catalog/authors/ 는 이전에 만든것을 참고해서 성공!
catalog/author/<id> 역시 book_detail과 똑같이 묘사해서 성공!
다만 book detail view template에 있는 <a href="..">를 하지못했는데, {% url 'author-detail' book.atuhor.pk %}
기본키(pk, 즉 id)를 통한 모델의 url을 받아오는 작업같았다.

// 매우 재밌었고, 모르는 구문이 있으면 익숙하지 않았지만, 하나하나 알아가는 과정과 내가 직접 홈페이지를 만들고있다는것이 신기하다.