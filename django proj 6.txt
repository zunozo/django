Sessions framework

실제 도서관에서는 각각의 유저들에게 그들의 이전 사이트 사용과 선호 등에 기반한 커스텀된 경험을 제공하고 싶을지도 모름. 예를 들어, 유저가 이미 알고 있는 경고 메시지들을 숨길수도 있음. 그 유저들이 다음에 사이트를 방문하거나 그들의 선호사항(e.g. 그들이 각 페이지에서 보여지길 원하는 검색의 결과 수)에 대해서 저장하는 것을 말함.
session framework는 당신이 이 행동의 분류하도록 하며, 각 사이트 방문자에 기반한 임의의 데이터를 검색하거나 저장하도록 함.

1. 세션이란?
웹 브라우저와 서버가 HTTP 프로토콜을 통해서 하는 모든 커뮤니케이션은 무상태(stateless)라 함. 프로토콜이 무상태라는 뜻은 클라이언트와 서버 사이의 메시지가 완벽하게 각각 독립적이라는 뜻. 여기엔 이전 메시지에 근거한 행동이나 순서라는 것이 존재하지 않음. 결국, 만약 사이트가 클라이언트와 계속적인 관계를 유지하는 것을 당신이 원한다면, 그 작업을 해야함.
세션이라는 것은 Django 그리고 대부분의 인터넷에서 사용된 메커니즘으로, 사이트와 특정 브라우저 사이의 'state'를 유지시키는 것임. 세션은 당신이 매 브라우저마다 임의의 데이터를 저장하게 하고, 이 데이터가 브라우저에 접속할 때 마다 사이트에서 활용될 수 있도록 함. 세션에 연결된 각각의 데이터 아이템들은 'key'에 의해 인용되고, 이는 또다시 데이터를 찾거나 저장하는 데에 이용됨.
장고는 특정 session id 를 포함하는 쿠키를 사용해서 각각의 브라우저와 사이트가 연결된 세션을 알아냄. 실질적인 세션의 data 사이트의 db에 기본 설정값으로 저장됨.(이는 쿠키안에 데이터를 저장하는 것보다 더 보안에 유리하과, 쿠키는 악의적인 사용자에게 취약함.) 당신은 Django를 다른 장소 (캐시, 파일, '보안이 된' 쿠키)에 저장하도록 설정 할 수 있지만, 그러나 기본위치가 상대적으로 더 안전함.

1-1. 세션사용설정하기
세션사용설정은 프로젝트 settings.py 에서 아래와 같이 INSTALLED_APPS와 MIDDLEWARE 부분에 있음.

1-2. 세션 사용하기
session 속성은 request parameter에서 파생된 view 안에 있음. (view로 전달되는 HttpRequest의 첫번째 함수). 이 세션의 속성은 현재의 사용자(정확히는 브라우저)의 site에 대한 connection을 의미함. 브라우저의 cookie 안에 정의 되어 있음.

이 session 속성은 사전 같은 객체인데 여러번 읽고 쓰고 심지어 수정까지 가능함. 다양한 dictionary 연산 - 즉, 모든 데이터 삭제, key가 존재하는지 데이터를 통한 looping 기타 등등. 무엇보다 표준적인 'dict'API 를 통해 값을 가져오거나 저장 할 수 있음.

장고가 대단한점 한가지는 이런 session의 메커니즘에 생각하지 않게끔 한다는 점임. 만일 view 안에 있는 아래의 code를 사용하면 오직 현재의 브라우저만이 현재의 request에 관한 my_car 정보를 알 수 있음.

1-3. 세션 데이터 저장하기
기본적으로 장고는 세션 데이터를 세션 db에 저장함. 그리고 그 session cookie를 필요할때 client 에게로 내려보내는 것. 즉, session 정보가 변경되었거나 삭제 되었을때, 앞장에서 기술한것처럼, 만일 session key값을 이용해서 어떤 정보가 변경되었다면 우리는 이에 대해 염려할 필요가 없음.
만일 당신이 session_data 안에 있는 어떤 정보를 수정했다면 장고는 여러분이 수정한걸 알아채지 못함. 만일 수정하고싶다면 수정되었다고 명시해주어야함
request.session.modifed = True

You can change the behavior so the site will update the database/send cookie on every request by adding SESSION_SAVE_EVERY_REQUEST = True into your project settings(locallibray/locallibrary/settings.py)

먼저 num_visits 세션 키 값을 가져오도록 함. 그리고 만약 전에 방문한적이 없다면 0이 되도록함. 매번 요청받을 때 마다, 값을 증가시키고 세션에 값을 저장함.(유저의 다음 방문을 위해서) context 변수를 통해 template에 num_visits 변수가 전달됨

이 지점에서 우리는 브라우저가 쿠키를 지원하는지 그렇지 않은지 테스트할 수도 있음.

//html파일을 바꿔주었음에도 불구하고, num_visits를 못받아오고있었는데, views.py에 context에 내가 전달하고 싶은 값을 형태에 맞게 넣어줘야 context를 통해서 html파일과 view파일이 소통한다는것을 알았다..
