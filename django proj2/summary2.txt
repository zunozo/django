static파일 관리
내가 사용하고자 하는 app 폴더에서
static폴더를 만든후, bootstrap등에서 bootstrap.min.css 파일을 받아온다.
그리고, settings.py에 가서
STATIC_ROOT=[os.path.join(BASE_DIR,'static')]을 넣어준다.

CDN서비스
원래 서버에있는 서비스를 다운받아 와야하지만, 어떤나라는 서버가 아주 먼 경우도 존재하므로, 각 나라마다? 중간 엣지서버를 만들어서, 엣지에서 다운받아가면 훨씬 빠르게 된다.
성능을 높여줌.

세션?
클라이언트와 서버간의 통신을할때, 처음에는 cookie가 없는상태로 요청을 하고, 그다음에 서버에는 DB에 등록되어 해당되는 FK를 만들고, 그것을 cookie로 보낸다. 그럼 클라이언트는 다음에 계속 요청할때 cookie를 통해서 요청하게되고, 서버는 해당되는 cookie와 알맞은 정보를 응답해준다.

view 관련
내가만든 객체를 모델로부터 db에대한 정보를 받고싶을때, Fcuser(model).objects.get(필드명=변수)을 통해서 받아온다. 당연히 변수는 FK가 될테고, 만약에 필드명=변수인게 2개이상이다. 이러면 Multiple Error가 나오게된다. 없으면 없는대로 오류가난다. 오류처리를 하려면 Django get을 참고해보자.
그리고 내 객체의 모델을 받아왔을때, 객체의 정보들이 있을텐데, 이렇게 쓸수있다. dict처럼 쓸수있을줄 알았는뎅.
fcuser.password
ex) check_password(fcuser.password, password )
check_password는 장고페이지 검색

redirect()
ex) return redirect('www.naver.com')이 가능하다. return redirect('/')홈으로 하게되면 urls.py에 가서 redirect하게됨.

session
request.session['user']=fcuser(객체).id
이렇게 해주는것만으로 session이 만들어지고 활용된다.
request.session.get을통해서 불러올수있고,
Fcuser.obejcts.get(pk=user_id) user_id를 pk로 해서 다시 객체를 받을 수 있다.

그럼지금 객체를 받는 두가지방법이 있는데,
처음 객체를 받았을때, Model.objects.get(튜플명=변수명)을 통해서 받아오고, 그 받아온 객체를 request.session['내가원하는']=객체.id 로 저장해주고, 다시 redirect해서 다른곳에서 받았을때, request.session.get('내가원하는')을 통해서 다시받아올 수 있게된다. 이 구조를 기억하자.

개발자환경에서 session이 어떻게 적용되었는가 볼수있는데, application에서 cookie로 이동하면 csrftoken 하고 sessionid가 되어있다.
session id는 client마다 다르다.

원래는 session[id]를 또 찾아서, 그것을 활용해서 session을 만들어야하는데 django는 그것을 뒤로 감춰준다.